Promise
=============
* Javascript 비동기 작업

### Promise 객체
* 사용법:
> const pr = new Promise((resolve, reject) => {
  //code
});

* 상태:
- 대기(Pending): 비동기 함수 실행 전 -> undefined
- 성공(Fulfilled): 비동기 함수 성공적으로 이행 -> value
- 실패(Rejected): 비동기 함수 실패 -> error

* 상태 처리:
- then(): resolve일 때 실행
- catch(): reject일 때 실행
- finally(): 성공이던 실패던 무조건 실행

* 프로미스 체이닝 => Promise.all()
> Promise.all( [f1(), f2(), f3()] ).then((res) => {});
> 해석: function 1,2,3 이 모두 실행되어야 then이 실행된다.
- 연속된 여러개의 함수를 콜백함수로 중첩하기 보다 Promise.all()을 쓰면 시간절약 가능하다.


* Promise.race()
> Promise.race( [f1(), f2(), f3()] ).then((res) => {});
> 해석: function 하나라도 성공 이행되면 then이 실행된다.
